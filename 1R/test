import pandas as pd
from sklearn.experimental import enable_halving_search_cv
from sklearn.model_selection import HalvingGridSearchCV, HalvingRandomSearchCV
from sklearn.decomposition import PCA
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler
from sklearn import tree
from sklearn.pipeline import Pipeline
from enum import Enum

# Define an Enum class
class ML_TASK(Enum):
    CLASSIFICATION = 1
    REGRESSION = 2
    CLUSTERING = 3

# Params
algo_name = '1R'
ml_task = True # True if you want to map fractions to integers for classification
local = False # False if you want to create predictions for Testset
randomized = False # True if you want to use Random Grid Search instead of brute force
pca_on = True # False if you don't want to use PCA
kfold_num = 5 # Train-Test-Split = 1, LOOCV = n

# Read
X_train = pd.read_csv('../pc_X_train.csv')
y_train = pd.read_csv('../pc_y_train.csv')
y_train = y_train.iloc[:, -1] # With iloc we extract the labels

X_test = pd.read_csv('../pc_X_test.csv')
ids = X_test.iloc[:, 0]

# If classification -> Do mapping
possible_numbers = list(set(y_train))
mapping = {val: idx for idx, val in enumerate(possible_numbers)}
y_train = [mapping[val] for val in y_train]
